{"version":3,"sources":["reportWebVitals.js","components/Card/Card.jsx","components/CardsList/CardsList.jsx","components/ErrorBoundary/ErrorBoundary.js","components/Scroll/Scroll.js","redux/constants.js","components/SearchBox/SearchBox.jsx","redux/actions.js","containers/App/App.js","redux/reducers.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","username","email","id","className","alt","src","CardsList","robotsList","map","idx","otherRobotProps","ErrorBoundary","props","state","hasError","error","info","this","setState","children","React","Component","Scroll","style","overflowY","border","height","CHANGE_SEARCH_QUERY","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILURE","connect","searchQuery","searchRobots","dispatch","setSearchQuery","event","text","target","value","type","payload","onChange","placeholder","requestRobots","isPending","onRequestRobots","fetch","resp","json","data","catch","useEffect","console","log","filteredRobotList","filter","robot","toLowerCase","includes","toLocaleLowerCase","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5c2d475.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\nexport const Card = ({ username, email, id }) => (\n\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n\t\t<img alt=\"robot\" src={`https://robohash.org/${id}?size=200x200`} />\n\t\t<h2>{username}</h2>\n\t\t<p>{email}</p>\n\t</div>\n);","import React from 'react';\nimport {Card} from '../Card/Card'\n\nexport const CardsList = ({robotsList}) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobotsList.map(({...otherRobotProps}, idx) => (\n\t\t\t\t\t<Card\n\t\t\t\t\t\tkey={idx} \n\t\t\t\t\t\tid={idx}\n\t\t\t\t\t\t{...otherRobotProps}\n\t\t\t\t\t/>\n\t\t\t\t))\n\t\t\t}\n\t\t</div>\n\t)\n}","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false,\n        }\n    }\n    componentDidCatch(error, info) {\n        this.setState({hasError: true})\n    }\n    render() {\n        if(this.state.hasError) {\n            return (\n                <h1>Ooops. That is not good</h1>\n            )\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary;","import React from 'react';\n\nconst Scroll = ({children}) => (\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n        {\n            children\n        }\n    </div>\n);\n\nexport default Scroll;","export const CHANGE_SEARCH_QUERY = 'CHANGE_SEARCH_QUERY';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILURE = 'REQUEST_ROBOTS_FAILURE';","import React from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchQuery } from '../../redux/actions';\n\nconst SearchBox = ({searchQuery, setSearchQuery}) => (\n    <div className=\"pa2\">\n        <input \n            className=\"pa3 ba b--green bg-lightest-blue\"\n            value={searchQuery}\n            type=\"search\"\n            onChange={setSearchQuery}\n            placeholder=\"search robots\"\n        />\n    </div>\n)\n\n\nconst mapStateToProps = state => ({\n    searchQuery: state.searchRobots.searchQuery,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    setSearchQuery: (event) => dispatch(setSearchQuery(event.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBox);","import { CHANGE_SEARCH_QUERY, REQUEST_ROBOTS_FAILURE, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS } from \"./constants\";\n\nexport const setSearchQuery = (text) => ({\n    type: CHANGE_SEARCH_QUERY,\n    payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n        .then(resp => resp.json())\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILURE, payload: error}) )\n}","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { CardsList } from \"../../components/CardsList/CardsList\";\nimport ErrorBoundary from \"../../components/ErrorBoundary/ErrorBoundary\";\nimport Scroll from \"../../components/Scroll/Scroll\";\nimport SearchBox from \"../../components/SearchBox/SearchBox\";\nimport { requestRobots } from \"../../redux/actions\";\nimport './App.css'\n\nconst App = ({searchQuery, robotsList, onRequestRobots, isPending, error}) => {\n\n\tuseEffect(() => {\n        onRequestRobots();\n    }, []);\n\n    if(isPending) {\n        return <h1>Loading</h1>\n    }\n\n    if(error) {\n        console.log(error)\n        return <h1>Something went wrong</h1>\n    }\n\n    let filteredRobotList = robotsList.filter(robot => robot.username.toLowerCase().includes(searchQuery.toLocaleLowerCase()))\n\n    return (\n        <div className=\"tc\">\n            <h1>RoboFriends</h1>\n            <SearchBox />\n            <Scroll>\n                <ErrorBoundary>\n                    <CardsList robotsList={filteredRobotList} />\n                </ErrorBoundary>\n            </Scroll>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => ({\n    searchQuery: state.searchRobots.searchQuery,\n    robotsList: state.requestRobots.robotsList,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    onRequestRobots: () => dispatch(requestRobots())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_QUERY, REQUEST_ROBOTS_FAILURE, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS } from \"./constants\"\n\nconst initialStateSearch = {\n    searchQuery: '',\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_QUERY:\n            return { \n                ...state, \n                searchQuery: action.payload,\n            }\n            \n        default: return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robotsList: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return {\n                ...state,\n                isPending: true,\n            }\n        case REQUEST_ROBOTS_SUCCESS:\n            return {\n                ...state,\n                isPending: false,\n                robotsList: action.payload,\n            }\n        case REQUEST_ROBOTS_FAILURE:\n            return {\n                ...state,\n                error: action.payload,\n                isPending: false,\n            }\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport App from './containers/App/App'\nimport { searchRobots, requestRobots } from './redux/reducers';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware ,logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}